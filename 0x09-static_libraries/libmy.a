!<arch>
_putchar.c/     0           0     0     644     140       `
#include <unistd.h>

/**
 *_putchar - write
 *@c : character
 *Return: 0
 */
int _putchar(char c)
{
	return (write(1, &c, 1));
}
_putchar.c/     0           0     0     644     140       `
#include <unistd.h>

/**
 *_putchar - write
 *@c : character
 *Return: 0
 */
int _putchar(char c)
{
	return (write(1, &c, 1));
}
0-isupper.c/    0           0     0     644     199       `
#include "main.h"

/**
 * _isupper - check if is upper
 *@c: input
 *Return: 0
 */

int _isupper(int c)
{
	if (c >= 'A' && c <= 'Z')
	{
		return (1);
	}
	else
	{
	return (0);
	}
}

0-memset.c/     0           0     0     644     262       `
#include "main.h"

/**
 * _memset  - set memory
 * @s:first input
 * @b:second input
 * @n:third input
 * Return: char
 */

char *_memset(char *s, char b, unsigned int n)
{
unsigned int i = 0;

while (i < n)
{
s[i] = b;
i++;
}
return (s);
}
0-strcat.c/     0           0     0     644     301       `
#include "main.h"

/**
* _strcat - append string
* @dest:input
* @src:input
* Return: char*
*/

char *_strcat(char *dest, char *src)
{
int length, i;

length = 0;

while (dest[length])
{
length++;
}
i = 0;
while (src[i])
{
dest[i + length] = src[i];
i++;
}
return (dest);
}

100-atoi.c/     0           0     0     644     640       `
#include "main.h"

/**
 * _atoi - converts a string to an integer
 * @s: string to be converted
 *
 * Return: the int converted from the string
 */
int _atoi(char *s)
{
	int i, d, n, len, f, digit;

	i = 0;
	d = 0;
	n = 0;
	len = 0;
	f = 0;
	digit = 0;

	while (s[len] != '\0')
		len++;

	while (i < len && f == 0)
	{
		if (s[i] == '-')
			++d;

		if (s[i] >= '0' && s[i] <= '9')
		{
			digit = s[i] - '0';
			if (d % 2)
				digit = -digit;
			n = n * 10 + digit;
			f = 1;
			if (s[i + 1] < '0' || s[i + 1] > '9')
				break;
			f = 0;
		}
		i++;
	}

	if (f == 0)
		return (0);

	return (n);
}
1-isdigit.c/    0           0     0     644     201       `
#include <stdio.h>

/**
 *_isdigit - if input number return 0
 *@c: input
 *Return: 0 if c number
 */

int _isdigit(int c)
{
	if (c >= 48 && c <= 57)
	{
		return (1);
	}
	return (0);
}

1-memcpy.c/     0           0     0     644     282       `
#include "main.h"

/**
 * _memcpy  - set memory
 * @dest:first input
 * @src:second input
 * @n:third input
 * Return: char
 */
char *_memcpy(char *dest, char *src, unsigned int n)
{
unsigned int i = 0;

while (i < n)
{
dest[i] = src[i];
i++;
}
return (dest);
}
1-strncat.c/    0           0     0     644     330       `
#include "main.h"

/**
* _strncat - append string
* @dest:input
* @src:input
* @n:input
* Return: char
*/

char *_strncat(char *dest, char *src, int n)
{
int length, i;

length = 0;
while (dest[length])
{
length++;
}
i = 0;

while (src[i] && i < n)
{
dest[length + i] = src[i];
i++;
}
return (dest);
}
2-strchr.c/     0           0     0     644     271       `
#include "main.h"

/**
 * _strchr  - set memory
 * @s:first input
 * @c:second input
 * Return: char
 */
char *_strchr(char *s, char c)
{
while (*s)
{
if (*s != c)
{
s++;
}
else
{
return (s);
}
}
if (c == '\0')
{
return (s);
}
return (NULL);
}

2-strlen.c/     0           0     0     644     171       `
#include "main.h"

/**
*_strlen - length of string
*@s: string
*Return:number
*/

int _strlen(char *s)
{
int i = 0;

while (s[i])
{
i++;
}
return (i);
}

2-strncpy.c/    0           0     0     644     329       `
#include "main.h"

/**
* _strncpy - cpy string
* @dest:input
* @src:input
* @n:input
* Return: char
*/
char *_strncpy(char *dest, char *src, int n)
{
	int i;

	i = 0;

	while (src[i] != '\0' && i < n)
	{
		dest[i] = src[i];
		i++;
	}

	while (i < n)
	{
		dest[i] = '\0';
		i++;
	}

	return (dest);
}

3-islower.c/    0           0     0     644     199       `
#include "main.h"

/**
 *_islower - check if letter is lower case
 *@c: input
 * Return: 0 || 1
 */

int _islower(int c)
{
	if (c >= 97 && c < 123)
	{
		return (1);
	}
	return (0);
}

3-puts.c/       0           0     0     644     189       `
#include "main.h"

/**
*_puts - print a string
*@str:input
*Return:void
*/

void _puts(char *str)
{
int i = 0;

while (str[i])
{
putchar(str[i]);
i++;
}
putchar('\n');
}

3-strcmp.c/     0           0     0     644     252       `
#include "main.h"

/**
* _strcmp - cpy string
* @s1:input
* @s2:input
* Return: char
*/

int _strcmp(char *s1, char *s2)
{
int res, i;

res = 0;
i = 0;
while (s1[i] && s1[i] == s2[i])
{
i++;
}
res = s1[i] - s2[i];
return (res);
}
3-strspn.c/     0           0     0     644     413       `
#include "main.h"

/**
 * _strspn - set memory
 * @s:first input
 * @accept:second input
 * Return: int
 */

unsigned int _strspn(char *s, char *accept)
{
int result = 0;

int i = 0;

while (s[i])
{
int j = 0;

int check = -1;

while (accept[j])
{
if (accept[j] == s[i])
{
check = 1;
result++;
break;
}
j++;
}
if (check == -1)
{
return (result);
}
i++;
}
return (result);
}

4-isalpha.c/    0           0     0     644     240       `
#include "main.h"

/**
 *_isalpha - check if letter or not
 *@c: input
 * Return: 0 || 1
 */

int _isalpha(int c)
{
	if (c >= 97 && c < 123)
	{
		return (1);
	}
	if (c >= 65 && c < 91)
	{
		return (1);
	}
	return (0);
}
4-strpbrk.c/    0           0     0     644     313       `
#include "main.h"

/**
 * _strpbrk - set memory
 * @s:first input
 * @accept:second input
 * Return: int
 */

char *_strpbrk(char *s, char *accept)
{
int i, j;

i = 0;
while (s[i])
{
j = 0;
while (accept[j])
{
if (s[i] == accept[j])
{
return (s + i);
}
j++;
}
i++;
}
return (NULL);
}

5-strstr.c/     0           0     0     644     434       `
#include "main.h"

/**
 * _strstr - set memory
 * @haystack:first input
 * @needle:second input
 * Return: int
 */

char *_strstr(char *haystack, char *needle)
{
unsigned int i = 0, j = 0;

while (haystack[i])
{
while (needle[j] && (haystack[i] == needle[0]))
{
if (haystack[i + j] == needle[j])
j++;
else
{
break;
}
}
if (needle[j])
{
i++;
j = 0;
}
else
{
return (haystack + i);
}
}
return (0);
}
6-abs.c/        0           0     0     644     193       `
#include "main.h"

/**
 *_abs - value absolute of number
 *@n : input
 *Return: 0
 */

int _abs(int n)
{
	if (n >= 0)
	{
		n = n;
	}
	else
	{
		n *= (-1);
	}
	return (n);
}

9-strcpy.c/     0           0     0     644     305       `
#include "main.h"

/**
* _strcpy - string copy
* @dest: first input
* @src: second input
* Return: void
*/

char *_strcpy(char *dest, char *src)
{
int i, length;
for (length = 0; src[length] != '\0'; length++)
{
}
for (i = 0; i <= length ; i++)
{
dest[i] = src[i];
}
return (dest);
}

libmy.a/        0           0     0     644     8         `
!<arch>
main.h/         0           0     0     644     690       `
#include <stdio.h>

int _putchar(char c);
int _islower(int c);
int _isalpha(int c);
int _abs(int n);
int _isupper(int c);
int _isdigit(int c);
int _strlen(char *s);
void _puts(char *s);
char *_strcpy(char *dest, char *src);
int _atoi(char *s);
char *_strcat(char *dest, char *src);
char *_strncat(char *dest, char *src, int n);
char *_strncpy(char *dest, char *src, int n);
int _strcmp(char *s1, char *s2);
char *_memset(char *s, char b, unsigned int n);
char *_memcpy(char *dest, char *src, unsigned int n);
char *_strchr(char *s, char c);
unsigned int _strspn(char *s, char *accept);
char *_strpbrk(char *s, char *accept);
char *_strstr(char *haystack, char *needle);